{"version":3,"sources":["../../../src/util/test/color.test.js"],"names":["assert","require","describe","it","deepEqual","Color","Blue","strictEqual","notEqual","Red","throws","Pink","TypeError","r","i","c","randomColor","name","randomColorExcluding","notDeepEqual"],"mappings":"AAAA;;AAGA;;;;AADA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA/B;;AAIAE,QAAQ,CAAC,OAAD,EAAU,YAAW;AACzBC,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACpCH,IAAAA,MAAM,CAACI,SAAP,CAAiBC,eAAMC,IAAvB,EAA6BD,eAAMC,IAAnC;AACH,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AACxCH,IAAAA,MAAM,CAACO,WAAP,CAAmBF,eAAMC,IAAzB,EAA+BD,eAAMC,IAArC;AACH,GAFC,CAAF;AAGAH,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACtCH,IAAAA,MAAM,CAACQ,QAAP,CAAgBH,eAAMC,IAAtB,EAA4BD,eAAMI,GAAlC;AACH,GAFC,CAAF;AAGAN,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC5CH,IAAAA,MAAM,CAACU,MAAP,CAAc,MAAML,eAAMM,IAAN,GAAa,UAAjC,EAA6CC,SAA7C;AACH,GAFC,CAAF;AAGAT,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAY;AACjDH,IAAAA,MAAM,CAACU,MAAP,CAAc,MAAML,eAAMI,GAAN,GAAY,MAAhC,EAAwCG,SAAxC;AACH,GAFC,CAAF;AAGAT,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAY;AAC9CH,IAAAA,MAAM,CAACU,MAAP,CAAc,MAAML,eAAMI,GAAN,CAAUI,CAAV,GAAc,GAAlC,EAAuCD,SAAvC;AACH,GAFC,CAAF;AAIAV,EAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAY;AACjCC,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACpC,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,YAAIC,CAAC,GAAGV,eAAMW,WAAN,EAAR;;AACAhB,QAAAA,MAAM,CAACI,SAAP,CAAiBW,CAAjB,EAAoBV,eAAMU,CAAC,CAACE,IAAR,CAApB,EAAmC,kBAAkBF,CAAC,CAACE,IAAvD;AACH;AACJ,KALC,CAAF;AAMH,GAPO,CAAR;AASAf,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAY;AAC1CC,IAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAY;AAClE,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,YAAIC,CAAC,GAAGV,eAAMa,oBAAN,CAA2B,CAACb,eAAMC,IAAP,EAAaD,eAAMI,GAAnB,CAA3B,CAAR;;AACAT,QAAAA,MAAM,CAACmB,YAAP,CAAoBJ,CAApB,EAAuBV,eAAMI,GAA7B;AACAT,QAAAA,MAAM,CAACmB,YAAP,CAAoBJ,CAApB,EAAuBV,eAAMC,IAA7B;AACAN,QAAAA,MAAM,CAACI,SAAP,CAAiBW,CAAjB,EAAoBV,eAAMU,CAAC,CAACE,IAAR,CAApB,EAAmC,kBAAkBF,CAAC,CAACE,IAAvD;AACH;AACJ,KAPC,CAAF;AAQH,GATO,CAAR;AAUH,CAvCO,CAAR","sourcesContent":["\"use strict\";\n\nconst assert = require('chai').assert;\nimport Color from '../color.js';\n\n\ndescribe(\"color\", function() {\n    it(\"Blue deep equals Blue\", function () {\n        assert.deepEqual(Color.Blue, Color.Blue);\n    });\n    it(\"Blue strictly equals Blue\", function () {\n        assert.strictEqual(Color.Blue, Color.Blue);\n    });\n    it(\"Blue does not equal Red\", function () {\n        assert.notEqual(Color.Blue, Color.Red);\n    });\n    it(\"Is Immutable to Adding Fields\", function () {\n        assert.throws(() => Color.Pink = \"Whatever\", TypeError);\n    });\n    it(\"Is Immutable to Reassigning Fields\", function () {\n        assert.throws(() => Color.Red = \"Else\", TypeError);\n    });\n    it(\"Is Immutable to Changing Fields\", function () {\n        assert.throws(() => Color.Red.r = 100, TypeError);\n    });\n\n    describe(\"#randomColor\", function () {\n        it('Generates valid color', function () {\n            for (let i = 0; i < 10; i++) {\n                let c = Color.randomColor();\n                assert.deepEqual(c, Color[c.name], \"Actual name: \" + c.name);\n            }\n        });\n    });\n\n    describe(\"#randomColorExcluding\", function () {\n        it('Generates valid color which is not in excluded list', function () {\n            for (let i = 0; i < 30; i++) {\n                let c = Color.randomColorExcluding([Color.Blue, Color.Red]);\n                assert.notDeepEqual(c, Color.Red);\n                assert.notDeepEqual(c, Color.Blue);\n                assert.deepEqual(c, Color[c.name], \"Actual name: \" + c.name);\n            }\n        });\n    });\n});\n"],"file":"color.test.js"}